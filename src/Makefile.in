#
#  Makefile for MKCL
#
#  Copyright (c) 2010-2019, Jean-Claude Beaudoin.
#  Copyright by a number of previous anonymous authors
#            presumed to be the same as for the rest of MKCL.
#
#  MKCL is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 3 of the License, or (at your option) any later version.
#
#  See file '../Copyright' for full details.
#
#
top_srcdir= @top_srcdir@
srcdir	= @srcdir@

# Programs used by "make":
#

@SET_MAKE@
CC	= @MKCL_CC@
LIBS	= @LIBS@ @TCP_LIBS@ @CORE_OS_LIBS@
LDFLAGS	= @LDFLAGS@
RM	= @RM@
LN_S	= @LN_S@
EXE	= @EXEEXT@

# ==================== Where To Install Things ====================

# The default location for installation.  Everything is placed in
# subdirectories of this directory.  The default values for many of
# the variables below are expressed in terms of this one, so you may
# not need to change them.  This defaults to /usr/local.
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@/
libdir=@libdir@/
includedir=@includedir@/
mkcldir=@mkcldir@/
localmkcldir=./lib/@PACKAGE_NAME@-@PACKAGE_VERSION@/

# Programs used by "make install":
#
SHELL = @SHELL@
INSTALL	= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_LIBRARY = $(INSTALL_SCRIPT)
INSTALL_DATA = @INSTALL_DATA@
mkinstalldirs = $(SHELL) ./util/mkinstalldirs

# Files

SUBDIRS = @SUBDIRS@
LIBRARIES = @LIBRARIES@
LSP_LIBRARIES = @LSP_LIBRARIES@
TARGETS = @TARGETS@

MKCL_HFILES = c/mkcl/config.h \
              c/mkcl/list.h \
              c/mkcl/external.h \
              c/mkcl/internal.h \
              c/mkcl/mkcl-fenv.h \
              c/mkcl/mkcl-gc.h \
              c/mkcl/mkcl-inl.h \
              c/mkcl/mkcl-math.h \
              c/mkcl/mkcl-unicode.h \
              c/mkcl/number.h \
              c/mkcl/object.h \
              c/mkcl/stacks.h


ASDF2_FASLS = ext/asdf2.fasb ../contrib/asdf2-bundle/asdf2-bundle.fas
ASDF_FASLS = ext/asdf.fasb ext/asdf3.fasb

EXTENSION_CONTRIB_FASLS = \
                ext/BYTECMP.fasb \
                ext/MAKE.fasb \
                ext/profile.fasb \
                ext/SERVE-EVENT.fasb \
                ext/mk-unix.fasb \
                ext/SOCKETS.fasb \
                ext/WALKER.fasb \
                ext/UNICODE-NAMES.fasb

EXTENSION_CONTRIB_ASDS = \
                ext/bytecmp.asd \
                ext/make.asd \
                ext/profile.asd \
                ext/serve-event.asd \
                ext/mk-unix.asd \
                ext/sockets.asd \
                ext/walker.asd \
                ext/unicode-names.asd

ASDF_CONTRIB_FASLS = \
                ext/uiop.fasb \
                asdf-stage/trivial-features.fasb \
                asdf-stage/trivial-garbage.fasb \
                asdf-stage/trivial-backtrace.fasb \
                asdf-stage/alexandria.fasb \
                asdf-stage/babel.fasb \
                asdf-stage/cffi.fasb \
                asdf-stage/bordeaux-threads.fasb \
		asdf-stage/net.didierverna.asdf-flv.fasb \
                asdf-stage/fiveam.fasb \
                asdf-stage/rt.fasb

EXTENSION_CONTRIB_STATIC_LIBS = $(EXTENSION_CONTRIB_FASLS:%.fasb=%.a)
EXTENSION_CONTRIB_AS2S = $(EXTENSION_CONTRIB_ASDS:%.asd=%.as2)

ASDF_CONTRIB_STATIC_LIBS = $(ASDF_CONTRIB_FASLS:%.fasb=%.a)
ASDF_CONTRIB_ASDS = $(ASDF_CONTRIB_FASLS:%.fasb=%.asd)
ASDF_CONTRIB_AS2S = $(ASDF_CONTRIB_FASLS:%.fasb=%.as2)

CONTRIB_FASLS = $(EXTENSION_CONTRIB_FASLS) $(ASDF_CONTRIB_FASLS)

CONTRIB_STATIC_LIBS = ext/asdf.a ext/asdf3.a ext/asdf2.a $(CONTRIB_FASLS:%.fasb=%.a)

MKCL_STATIC_PARTS = mkcltop.@LIBEXT@ lsp.a mkclmin.@LIBEXT@


all: base extension-contribs

base: mkcc$(EXE) mkcl-config $(TARGETS) help.doc

contribs: extension-contribs asdf-contribs

extension-contribs: ../contrib/unicode/UnicodeData.txt $(EXTENSION_CONTRIB_FASLS) $(EXTENSION_CONTRIB_ASDS) $(EXTENSION_CONTRIB_AS2S) # $(EXTENSION_CONTRIB_STATIC_LIBS)

asdf-contribs: $(ASDF_FASLS) $(ASDF2_FASLS) $(ASDF_CONTRIB_FASLS) $(ASDF_CONTRIB_STATIC_LIBS) $(ASDF_CONTRIB_ASDS) $(ASDF_CONTRIB_AS2S)

.PHONY:	all base contribs extension-contribs asdf-contribs

Makefile: Makefile.in config.status
	./config.status

c/mkcl/config.h: c/mkcl/config.h.in config.status
	./config.status
	touch c/mkcl/config.h


mkcl-small$(EXE) lsp.a $(LSP_LIBRARIES) encodings: lsp/git_describe.lsp compile.lsp lsp/config.lsp cmp/cmpdefs.lsp lsp/*.lsp clos/*.lsp cmp/*.lsp c/mkcl/mkcl-cmp.h c/mkcl/config.h BUILD-STAMP mkcl_min$(EXE) mkcltop.@LIBEXT@
	./mkcl_min$(EXE) compile
	for i in $(LSP_LIBRARIES) ; do \
	  if test -s $$i ; then \
	    case $$i in \
	      *.dll) $(INSTALL_LIBRARY) $$i ./bin/ ;; \
	      *) ;; \
	    esac \
	  fi \
	done


ext-dir-exists:
	mkdir ./ext
	touch ext-dir-exists

asdf-stage-dir-exists:
	mkdir ./asdf-stage
	touch asdf-stage-dir-exists

ext/asdf2.fasb ext/asdf2.a: mkcl-small$(EXE) ext-dir-exists build-asdf2.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/asdf2/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf2.lsp

ext/asdf3.fasb ext/asdf3.a: mkcl-small$(EXE) ext-dir-exists build-asdf3.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/asdf3/*.lisp
	(cd ../contrib/asdf3/; $(MAKE) build/asdf.lisp; mv -f build/asdf.lisp build/asdf3.lisp)
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf3.lsp

ext/asdf.fasb ext/asdf.a: mkcl-small$(EXE) ext-dir-exists build-asdf.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/asdf/*.lisp
	(cd ../contrib/asdf/; $(MAKE) build/asdf.lisp)
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf.lsp

ext/uiop.fasb ext/uiop.a ext/uiop.asd ext/uiop.as2: mkcl-small$(EXE) ext-dir-exists build-uiop.lsp cmp/CMP.fasb compile-utils.lsp ext/asdf.fasb ../contrib/asdf/uiop/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-uiop.lsp
	cp ./ext/uiop/uiop.fasb ./ext/
	cp ./ext/uiop/uiop.a ./ext/
	cp ./ext/uiop/uiop.asd ./ext/
	cp ./ext/uiop/uiop.as2 ./ext/


ext/BYTECMP.fasb ext/BYTECMP.a ext/bytecmp.asd ext/bytecmp.as2: mkcl-small$(EXE) ext-dir-exists build-bytecmp.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/bytecmp/bytecmp.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-bytecmp.lsp

ext/MAKE.fasb ext/MAKE.a ext/make.asd ext/make.as2: mkcl-small$(EXE) ext-dir-exists build-defsystem.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/defsystem/defsystem.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-defsystem.lsp

ext/profile.fasb ext/profile.a ext/profile.asd ext/profile.as2: mkcl-small$(EXE) ext-dir-exists build-profile.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/profile/profile.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-profile.lsp

../contrib/sockets/package.lisp: ../contrib/sockets/sockets.lisp
	touch ../contrib/sockets/package.lisp

ext/SOCKETS.fasb ext/SOCKETS.a ext/sockets.asd ext/sockets.as2: mkcl-small$(EXE) ext-dir-exists build-sockets.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/sockets/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-sockets.lsp

ext/mk-unix.fasb ext/mk-unix.a ext/mk-unix.asd ext/mk-unix.as2: mkcl-small$(EXE) ext-dir-exists build-mk-unix.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/mk-unix/*.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-mk-unix.lsp

ext/SERVE-EVENT.fasb ext/SERVE-EVENT.a ext/serve-event.asd ext/serve-event.as2: mkcl-small$(EXE) ext-dir-exists build-serve-event.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/serve-event/serve-event.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-serve-event.lsp

ext/WALKER.fasb ext/WALKER.a ext/walker.asd ext/walker.as2: mkcl-small$(EXE) ext-dir-exists build-walker.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/walker/walk.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-walker.lsp

ext/UNICODE-NAMES.fasb ext/UNICODE-NAMES.a ext/unicode-names.asd ext/unicode-names.as2: mkcl-small$(EXE) ext-dir-exists build-unicode-names.lsp cmp/CMP.fasb compile-utils.lsp ../contrib/unicode/unicode-names.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-unicode-names.lsp



../contrib/asdf2-bundle/asdf2-bundle.fas: mkcl-small$(EXE) build-asdf2-bundle.lsp cmp/CMP.fasb compile-utils.lsp ext/asdf2.fasb ../contrib/asdf2-bundle/*.lisp
	$(RM) ../contrib/asdf2-bundle/asdf2-bundle.fas # something said it had to be remade but ASDF may not agree, so force it.
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf2-bundle.lsp


asdf-stage/trivial-features.fasb asdf-stage/trivial-features.a asdf-stage/trivial-features.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/trivial-features*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- trivial-features ../contrib/trivial-features*/
	cp ./asdf-stage/trivial-features*/trivial-features.fasb ./asdf-stage/
	cp ./asdf-stage/trivial-features*/trivial-features.a ./asdf-stage/
	cp ./asdf-stage/trivial-features*/trivial-features.asd ./asdf-stage/

asdf-stage/trivial-features.as2: asdf-stage/trivial-features.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/trivial-features*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- trivial-features ../contrib/trivial-features*/ ./asdf-stage/


asdf-stage/trivial-garbage.fasb asdf-stage/trivial-garbage.a asdf-stage/trivial-garbage.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/trivial-garbage*/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- trivial-garbage ../contrib/trivial-garbage*/
	cp ./asdf-stage/trivial-garbage*/trivial-garbage.fasb ./asdf-stage/
	cp ./asdf-stage/trivial-garbage*/trivial-garbage.a ./asdf-stage/
	cp ./asdf-stage/trivial-garbage*/trivial-garbage.asd ./asdf-stage/

asdf-stage/trivial-garbage.as2: asdf-stage/trivial-garbage.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/trivial-garbage*/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- trivial-garbage ../contrib/trivial-garbage*/ ./asdf-stage/


asdf-stage/trivial-backtrace.fasb asdf-stage/trivial-backtrace.a asdf-stage/trivial-backtrace.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/trivial-backtrace*/dev/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- trivial-backtrace ../contrib/trivial-backtrace*/
	cp ./asdf-stage/trivial-backtrace*/trivial-backtrace.fasb ./asdf-stage/
	cp ./asdf-stage/trivial-backtrace*/trivial-backtrace.a ./asdf-stage/
	cp ./asdf-stage/trivial-backtrace*/trivial-backtrace.asd ./asdf-stage/

asdf-stage/trivial-backtrace.as2: asdf-stage/trivial-backtrace.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/trivial-backtrace*/dev/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- trivial-backtrace ../contrib/trivial-backtrace*/ ./asdf-stage/


asdf-stage/alexandria.fasb asdf-stage/alexandria.a asdf-stage/alexandria.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/alexandria*/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- alexandria ../contrib/alexandria*/
	cp ./asdf-stage/alexandria*/alexandria.fasb ./asdf-stage/
	cp ./asdf-stage/alexandria*/alexandria.a ./asdf-stage/
	cp ./asdf-stage/alexandria*/alexandria.asd ./asdf-stage/

asdf-stage/alexandria.as2: asdf-stage/alexandria.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/alexandria*/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- alexandria ../contrib/alexandria*/ ./asdf-stage/


asdf-stage/babel.fasb asdf-stage/babel.a asdf-stage/babel.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/trivial-features.fasb asdf-stage/alexandria.fasb ../contrib/babel*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- babel ../contrib/babel*/
	cp ./asdf-stage/babel*/babel.fasb ./asdf-stage/
	cp ./asdf-stage/babel*/babel.a ./asdf-stage/
	cp ./asdf-stage/babel*/babel.asd ./asdf-stage/

asdf-stage/babel.as2: asdf-stage/babel.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/trivial-features.fasb asdf-stage/alexandria.fasb ../contrib/babel*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- babel ../contrib/babel*/ ./asdf-stage/


asdf-stage/cffi.fasb asdf-stage/cffi.a asdf-stage/cffi.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/babel.fasb ../contrib/cffi*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- cffi ../contrib/cffi*/
	cp ./asdf-stage/cffi*/cffi.fasb ./asdf-stage/
	cp ./asdf-stage/cffi*/cffi.a ./asdf-stage/
	cp ./asdf-stage/cffi*/cffi.asd ./asdf-stage/

asdf-stage/cffi.as2: asdf-stage/cffi.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/babel.fasb ../contrib/cffi*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- cffi ../contrib/cffi*/ ./asdf-stage/


asdf-stage/bordeaux-threads.fasb asdf-stage/bordeaux-threads.a asdf-stage/bordeaux-threads.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/alexandria.fasb ../contrib/bordeaux-threads-*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- bordeaux-threads ../contrib/bordeaux-threads-*/
	cp ./asdf-stage/bordeaux-threads*/bordeaux-threads.fasb ./asdf-stage/
	cp ./asdf-stage/bordeaux-threads*/bordeaux-threads.a ./asdf-stage/
	cp ./asdf-stage/bordeaux-threads*/bordeaux-threads.asd ./asdf-stage/

asdf-stage/bordeaux-threads.as2: asdf-stage/bordeaux-threads.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/alexandria.fasb ../contrib/bordeaux-threads-*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- bordeaux-threads ../contrib/bordeaux-threads-*/ ./asdf-stage/


asdf-stage/net.didierverna.asdf-flv.fasb asdf-stage/net.didierverna.asdf-flv.a asdf-stage/net.didierverna.asdf-flv.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/alexandria.fasb ../contrib/net.didierverna.asdf-flv_*/*
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- net.didierverna.asdf-flv ../contrib/net.didierverna.asdf-flv_*/
	cp ./asdf-stage/net.didierverna.asdf-flv*/net.didierverna.asdf-flv.fasb ./asdf-stage/
	cp ./asdf-stage/net.didierverna.asdf-flv*/net.didierverna.asdf-flv.a ./asdf-stage/
	cp ./asdf-stage/net.didierverna.asdf-flv*/net.didierverna.asdf-flv.asd ./asdf-stage/

asdf-stage/net.didierverna.asdf-flv.as2: asdf-stage/net.didierverna.asdf-flv.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/alexandria.fasb ../contrib/net.didierverna.asdf-flv_*/*
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- net.didierverna.asdf-flv ../contrib/net.didierverna.asdf-flv_*/ ./asdf-stage/


asdf-stage/fiveam.fasb asdf-stage/fiveam.a asdf-stage/fiveam.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib*.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/alexandria.fasb asdf-stage/net.didierverna.asdf-flv.fasb asdf-stage/trivial-backtrace.fasb ../contrib/fiveam-*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- fiveam ../contrib/fiveam-*/
	cp ./asdf-stage/fiveam*/src/fiveam.fasb ./asdf-stage/
	cp ./asdf-stage/fiveam*/src/fiveam.a ./asdf-stage/
	cp ./asdf-stage/fiveam*/src/fiveam.asd ./asdf-stage/

asdf-stage/fiveam.as2: asdf-stage/fiveam.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) asdf-stage/alexandria.fasb asdf-stage/net.didierverna.asdf-flv.fasb asdf-stage/trivial-backtrace.fasb ../contrib/fiveam-*/src/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- fiveam ../contrib/fiveam-*/ ./asdf-stage/


asdf-stage/rt.fasb asdf-stage/rt.a asdf-stage/rt.asd: mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/rt*/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib.lsp -- rt ../contrib/rt*/
	cp ./asdf-stage/rt*/rt.fasb ./asdf-stage/
	cp ./asdf-stage/rt*/rt.a ./asdf-stage/
	cp ./asdf-stage/rt*/rt.asd ./asdf-stage/

asdf-stage/rt.as2: asdf-stage/rt.fasb mkcl-small$(EXE) asdf-stage-dir-exists build-asdf-contrib-as2.lsp $(ASDF_FASLS) $(ASDF2_FASLS) ../contrib/rt*/*.lisp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-asdf-contrib-as2.lsp -- rt ../contrib/rt*/ ./asdf-stage/


cmp/CMP.fasb cmp/CMP.a cmp/CMP.asd cmp/CMP.as2: mkcl-small$(EXE) cmp/*.lsp build-cmp.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-cmp.lsp

mkcl-dyn: mkcl-small$(EXE) cmp/CMP.fasb build-dynamic-mkcl.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-dynamic-mkcl.lsp

mkcl$(EXE): mkcl-small$(EXE) cmp/CMP.fasb build-mkcl.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-mkcl.lsp

mkcl-full$(EXE): mkcl-small$(EXE) build-full-mkcl.lsp ext/asdf.a ext/profile.a ext/SERVE-EVENT.a ext/SOCKETS.a ext/mk-unix.a
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load build-full-mkcl.lsp --  ext/asdf.a ext/profile.a ext/SERVE-EVENT.a ext/SOCKETS.a ext/mk-unix.a

help.doc: dump-doc.lsp mkcl-small$(EXE) doc/help.lsp
	./mkcl-small$(EXE) -norc -q --external-format "(:ascii :lf)" -load dump-doc.lsp


mkcl_min$(EXE): $(LIBRARIES) mkclmin.@LIBEXT@ c/cinit.o c/all_symbols.o .gdbinit
	$(CC) $(LDFLAGS) -o $@ c/cinit.o c/all_symbols.o mkclmin.@LIBEXT@ $(LIBRARIES) $(LIBS)


.gdbinit: util/gdbinit
	cp util/gdbinit $@

c/cinit.o: c/GNUmakefile c/cinit.c c/mkcl/mkcl.h
	cd c; $(MAKE) GNUmakefile; $(MAKE) -f GNUmakefile cinit.o

c/all_symbols.o: c/GNUmakefile c/all_symbols.c c/symbols_list.h c/symbols_list2.h c/mkcl/mkcl.h
	cd c; $(MAKE) GNUmakefile; $(MAKE) -f GNUmakefile all_symbols.o

c/all_symbols2.o: c/GNUmakefile c/all_symbols.c c/symbols_list.h c/symbols_list2.h c/mkcl/mkcl.h
	cd c; $(MAKE) GNUmakefile; $(MAKE) -f GNUmakefile all_symbols2.o

lsp/config.lsp: lsp/config.pre
	sed -e 's,@mkcldir\\@,$(mkcldir),g' < lsp/config.pre > lsp/config.lsp

lsp/config.pre: lsp/config.lsp.in config.status
	./config.status

cmp/cmpdefs.lsp: cmp/cmpdefs.pre
	sed -e 's,@mkcldir\\@,"$(mkcldir)",g' \
	    -e 's,@libdir\\@,"$(libdir)",g' \
	    -e 's,@includedir\\@,"$(includedir)",g' < cmp/cmpdefs.pre > $@

cmp/cmpdefs.pre: cmp/cmpdefs.lsp.in config.status
	./config.status

lsp/git_describe.lsp: FORCE
	@./git_describe_this_mkcl.sh >lsp/git_describe.lsp.new
	@if [ ! -f lsp/git_describe.lsp ]; then \
	     echo Created a new lsp/git_describe.lsp; \
             mv lsp/git_describe.lsp.new lsp/git_describe.lsp; \
	elif ! cmp -s lsp/git_describe.lsp.new lsp/git_describe.lsp; then \
	     echo Updated lsp/git_describe.lsp; \
	     mv lsp/git_describe.lsp.new lsp/git_describe.lsp; \
	else rm lsp/git_describe.lsp.new; fi

FORCE:


compile.lsp: compile.pre bare.lsp lsp/load.lsp clos/load.lsp cmp/load.lsp
	sed -e 's,@mkcldir\\@,$(mkcldir),g' \
	    -e 's,@libdir\\@,$(libdir),g' < compile.pre > compile.lsp

compile.pre: compile.lsp.in config.status
	./config.status

bare.lsp: bare.lsp.in config.status
	./config.status

lsp/load.lsp: lsp/load.lsp.in config.status
	./config.status

clos/load.lsp: clos/load.lsp.in config.status
	./config.status

cmp/load.lsp: cmp/load.lsp.in config.status
	./config.status

mkcl-config: mkcl-config.pre
	sed -e 's,@libdir\\@,$(libdir),' \
	    -e 's,@includedir\\@,$(includedir),' mkcl-config.pre > mkcl-config

mkcl-config.pre: util/mkcl-config config.status
	./config.status


mkcc$(EXE): ../contrib/tinycc/mkcc$(EXE)
	cp ../contrib/tinycc/mkcc$(EXE) mkcc$(EXE)
	mkdir -p lib/mkcc/include
	cp ../contrib/tinycc/include/*.h lib/mkcc/include

../contrib/tinycc/mkcc$(EXE):  ../contrib/tinycc/*.[ch] ../contrib/tinycc/Makefile ../contrib/tinycc/config.mak
	cd ../contrib/tinycc; $(MAKE) mkcc$(EXE)

libmkcc1.a: ../contrib/tinycc/libmkcc1.a
	cp ../contrib/tinycc/libmkcc1.a libmkcc1.a

../contrib/tinycc/libmkcc1.a: ../contrib/tinycc/mkcc$(EXE) ../contrib/tinycc/lib/*.[cS] ../contrib/tinycc/lib/Makefile
	cd ../contrib/tinycc; $(MAKE) libmkcc1.a

mkclmin.@LIBEXT@: c/GNUmakefile c/mkcl/mkcl.h $(MKCL_HFILES) c/*.c c/arch/*.c c/*.h
	cd c; $(MAKE) GNUmakefile; $(MAKE) -f GNUmakefile ../mkclmin.@LIBEXT@

mkcltop.@LIBEXT@: c/GNUmakefile c/all_symbols2.o
	cd c; $(MAKE) GNUmakefile; $(MAKE) -f GNUmakefile ../mkcltop.@LIBEXT@

gc/.libs/@LIBPREFIX@gc.@LIBEXT@: gc/*.c gc/include/*.h gc/include/*/*.h
	cd gc; $(MAKE)

mkclgc.@LIBEXT@: gc/.libs/@LIBPREFIX@gc.@LIBEXT@
	cp -p gc/.libs/@LIBPREFIX@gc.@LIBEXT@ ./mkclgc.@LIBEXT@

c/mkcl/gc/gc.h: gc/include/gc.h
	mkdir -p c/mkcl/gc
	cp -p gc/include/*.h c/mkcl/gc

c/mkcl/mkcl-gc.h: c/mkcl/gc/gc.h
	touch $@


c/mkcl/mkcl-cmp.h: c/mkcl/mkcl.h c/symbols_list.h
	touch $@

c/mkcl/mkcl.h: $(MKCL_HFILES)
	touch $@


BUILD-STAMP: config.status
	echo "#" `uname -a` > $@
	head -8 config.log | tail -6 >> $@

install: install-base install-extension-contribs
# install-asdf-contribs install-slime
#	cd doc; $(MAKE) prefix=$(prefix) install

install-base: base libmkcc1.a
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(libdir) \
	  $(DESTDIR)$(mkcldir)  $(DESTDIR)$(libdir)/mkcc/include $(DESTDIR)$(libdir)/mkcc/@build_cpu@ \
          $(DESTDIR)$(includedir) $(DESTDIR)$(includedir)/mkcl
	$(INSTALL_DATA) ../Copyright ../LGPL $(DESTDIR)$(mkcldir)
	$(INSTALL_DATA) ../Copyright ../LGPL $(DESTDIR)$(includedir)/mkcl
	for i in $(TARGETS); do \
	  $(INSTALL_PROGRAM) $$i $(DESTDIR)$(bindir); \
	done
	if [ -d encodings ]; then \
	  $(mkinstalldirs) $(DESTDIR)$(mkcldir)/encodings; \
	  for i in ./encodings/*; do \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(mkcldir)/encodings; \
	  done \
	fi
	$(INSTALL_DATA) ./c/mkcl/*.h $(DESTDIR)$(includedir)/mkcl
	if (echo $(SUBDIRS) | grep gc); then \
	  $(mkinstalldirs) $(DESTDIR)$(includedir)/mkcl/gc; \
	  $(INSTALL_DATA) ./c/mkcl/gc/*.h $(DESTDIR)$(includedir)/mkcl/gc; \
	fi
	rm $(DESTDIR)$(includedir)/mkcl/config.h
	sed '/-CUT-/,$$d' ./c/mkcl/config.h > $(DESTDIR)$(includedir)/mkcl/config.h
	$(INSTALL_SCRIPT) mkcl-config $(DESTDIR)$(bindir)
	for i in BUILD-STAMP help.doc ; do \
	  $(INSTALL_DATA) $$i $(DESTDIR)$(mkcldir); \
	done
	for i in $(LSP_LIBRARIES); do \
	  if test -s $$i ; then \
	    case $$i in \
	      *.dll) $(INSTALL_LIBRARY) $$i $(DESTDIR)$(libdir); \
		     $(INSTALL_LIBRARY) $$i $(DESTDIR)$(bindir);; \
	      *) $(INSTALL_LIBRARY) $$i $(DESTDIR)$(libdir);; \
	    esac \
	  fi \
	done
	if [ "x@MKCL_INTERNAL_SONAME@" != "x" -a -f "@MKCL_INTERNAL_SONAME@" ]; then \
	  ( cd $(DESTDIR)$(libdir) && rm -f @SONAME3@ @SONAME2@ @SONAME1@ @SONAME@ && \
	    $(LN_S) @MKCL_INTERNAL_SONAME@ @SONAME3@ && \
	    $(LN_S) @MKCL_INTERNAL_SONAME@ @SONAME2@ && \
	    $(LN_S) @MKCL_INTERNAL_SONAME@ @SONAME1@ && \
	    $(LN_S) @MKCL_INTERNAL_SONAME@ @SONAME@ ) \
	fi
	for i in $(MKCL_STATIC_PARTS) $(LIBRARIES); do \
	  if test -s $$i ; then \
	    $(INSTALL_LIBRARY) $$i $(DESTDIR)$(mkcldir); \
	  fi \
	done
	$(INSTALL_DATA) c/dpp$(EXE) $(DESTDIR)$(mkcldir)
	$(INSTALL_DATA) mkcl_min$(EXE) $(DESTDIR)$(mkcldir)
	$(INSTALL_DATA) cmp/cmp.asd cmp/cmp.as2 $(DESTDIR)$(mkcldir)
	if [ -f cmp/CMP.a ] ; then $(INSTALL_DATA) cmp/CMP.a $(DESTDIR)$(mkcldir); fi
	$(INSTALL_PROGRAM) cmp/CMP.fasb $(DESTDIR)$(mkcldir)
	$(INSTALL_PROGRAM) mkcc$(EXE) $(DESTDIR)$(bindir)
	$(INSTALL_DATA) ../contrib/tinycc/include/*.h $(DESTDIR)$(libdir)/mkcc/include
	$(INSTALL_LIBRARY) libmkcc1.a $(DESTDIR)$(libdir)/mkcc/@build_cpu@

install-extension-contribs: extension-contribs
	$(mkinstalldirs) $(DESTDIR)$(mkcldir)/contrib/
	for i in ext/*.as2 ext/*.asd; do $(INSTALL_DATA) $${i} $(DESTDIR)$(mkcldir)/contrib/; done
	for i in ../contrib/unicode/UnicodeData.txt $(EXTENSION_CONTRIB_FASLS) $(EXTENSION_CONTRIB_STATIC_LIBS); do \
	  if test -s $$i; then \
	    case $$i in \
	      *.fasb) $(INSTALL_PROGRAM) $$i $(DESTDIR)$(mkcldir)/contrib/;; \
	      *) $(INSTALL_DATA) $$i $(DESTDIR)$(mkcldir)/contrib/;; \
	    esac; \
	  fi \
	done

install-asdf-contribs: asdf-contribs # $(ASDF_FASLS) $(ASDF2_FASLS) $(ASDF_CONTRIB_FASLS)
	$(mkinstalldirs) $(DESTDIR)$(mkcldir)/contrib/
	for i in asdf-stage/*.as2 asdf-stage/*.asd; do $(INSTALL_DATA) $${i} $(DESTDIR)$(mkcldir)/contrib/; done
	for i in ext/asdf.fasb ext/asdf3.fasb ext/asdf2.fasb ext/asdf.a ext/asdf3.a ext/asdf2.a $(ASDF_CONTRIB_FASLS) $(ASDF_CONTRIB_STATIC_LIBS); do \
	  if test -s $$i; then \
	    case $$i in \
	      *.fasb) $(INSTALL_PROGRAM) $$i $(DESTDIR)$(mkcldir)/contrib/;; \
	      *) $(INSTALL_DATA) $$i $(DESTDIR)$(mkcldir)/contrib/;; \
	    esac; \
	  fi \
	done
	if [ -d ../contrib/asdf2-bundle ]; then \
	  cp -pR ../contrib/asdf2-bundle $(DESTDIR)$(mkcldir)/contrib/; \
	fi

install-slime:
	if [ -d ../contrib/slime ]; then \
	  cp -pR ../contrib/slime $(DESTDIR)$(mkcldir)/contrib/; \
	fi

install-local: install-base-local install-extension-contribs-local install-asdf-contribs-local install-slime-local


install-base-local: base libmkcc1.a
	$(MAKE) prefix="." install-base

install-extension-contribs-local: extension-contribs
	$(MAKE) prefix="." install-extension-contribs

install-asdf-contribs-local: asdf-contribs
	$(MAKE) prefix="." install-asdf-contribs

install-slime-local:
	$(MAKE) prefix="." install-slime


uninstall:
	for i in $(TARGETS) mkcl-config; do $(RM) $(DESTDIR)$(bindir)/$$(basename $$i); done
	$(RM) $(DESTDIR)$(bindir)/mkcc$(EXE)
	$(RM) -r $(DESTDIR)$(includedir)/mkcl $(DESTDIR)$(mkcldir)
	$(RM) -r $(DESTDIR)$(libdir)/mkcc
	for i in $(LSP_LIBRARIES); do \
	  case $$i in \
	    *.dll) $(RM) $(DESTDIR)$(libdir)/$$i || : ; $(RM) $(DESTDIR)$(bindir)/$$i || : ;; \
	    *) $(RM) $(DESTDIR)$(libdir)/$$i || : ;; \
	  esac \
	done
	-(cd $(DESTDIR)$(libdir) && rm -f @SONAME3@ @SONAME2@ @SONAME1@ @SONAME@)
	$(RM) -r $(DESTDIR)$(mkcldir)
#	cd doc; $(MAKE) uninstall

uninstall-local:
	$(MAKE) prefix="." uninstall
	$(RM) -r ./bin ./lib ./include


doc: $(TARGETS)
	cd doc; $(MAKE)

clean: clean_lisp clean_contribs
	cd c; $(MAKE) clean
	$(RM) compile.lsp mkcc$(EXE) mkcl-config BUILD-STAMP lsp/git_describe.lsp
	$(RM) mkcl_min$(EXE) mkcl$(EXE) mkcl-dyn mkcl-small$(EXE) mkcl-full$(EXE)
	$(RM) MKCLINIT*
	$(RM) MKC*.c MKC*.tmp
	$(RM) -r encodings
	$(RM) MODULES help.doc TAGS
	$(RM) c/mkcl/gc/*.h ./mkclgc.@LIBEXT@
	-(cd gc; $(MAKE) clean-libtool clean-libLTLIBRARIES)
	$(RM) *.dll bin/*.dll
	$(RM) *.o *.a *.la *.so *.data *.fasb *.fas core core.* a.out

clean_contribs:
	$(RM) -r lib/mkcc/@build_cpu@
	$(RM) -r ext ext-dir-exists asdf-stage asdf-stage-dir-exists
	cd ../contrib; MAKE=$(MAKE) sh ./clean_up.sh

clean_lisp:
	$(RM) lsp.a
	(cd lsp; $(RM) *.o *.data *.c *.sdat *.h *.a *.fasb *.fas *.asd *.as2)
	(cd clos; $(RM) *.o *.data *.c *.sdat *.h *.a *.fasb *.fas *.asd *.as2)
	(cd cmp; $(RM) *.o *.data *.c *.sdat *.h *.a *.fasb *.fas *.asd *.as2)
	$(RM) lsp/config.lsp cmp/cmpdefs.lsp
	$(RM) help.doc

distclean: uninstall-local clean
	cd c; $(MAKE) distclean
	$(RM) mkcl-config.pre
	$(RM) doc/Makefile doc/mkcl.man doc/mkcl-config.man
	$(RM) c/mkcl/config.h c/mkcl/configpre.h
	$(RM) lsp/config.pre lsp/load.lsp clos/load.lsp
	$(RM) cmp/cmpdefs.pre cmp/load.lsp
	-(cd gc/libatomic_ops; $(MAKE) clean distclean)
	-(cd gc; $(MAKE) clean distclean)
	$(RM) config.status config.version config.log config.cache
	$(RM) Makefile bare.lsp compile.pre

realclean: distclean
	$(RM) *~ c/*~ c/arch/*~
	$(RM) lsp/*~ clos/*~ cmp/*~

TAGS: lsp/*.lsp lsp/config.pre clos/*.lsp cmp/*.lsp cmp/cmpdefs.pre c/*.c c/*.h c/arch/*.c c/mkcl/*.dh c/mkcl/[!C]*.h
	if type etags >/dev/null 2>&1; then  \
	  if etags --help | grep -q -e "--language-force"; then \
	    etags -R lsp/*.lsp lsp/config.pre clos/*.lsp cmp/*.lsp cmp/cmpdefs.pre --language-force=c c/*.c c/*.h c/arch/*.c c/mkcl/*.dh c/mkcl/[!C]*.h; \
	  else \
	    etags -R lsp/*.lsp lsp/config.pre clos/*.lsp cmp/*.lsp cmp/cmpdefs.pre --language=c c/*.c c/*.h c/arch/*.c c/mkcl/*.dh c/mkcl/[!C]*.h; \
	  fi \
	else touch TAGS; fi



c/makefile.depend: c/*.c c/*.h c/arch/*.c c/mkcl/mkcl.h $(MKCL_HFILES)
	cd c; $(MAKE) makefile.depend

c/GNUmakefile: c/Makefile.in c/makefile.depend
	cd c; $(MAKE) GNUmakefile

c/symbols_list2.h: c/symbols_list.h
	cd c; $(MAKE) symbols_list2.h

